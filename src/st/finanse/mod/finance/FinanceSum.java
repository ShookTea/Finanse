package st.finanse.mod.finance;

import java.util.ArrayList;
import java.util.Arrays;
import st.finanse.UpdateI;
import st.finanse.proj.Project;

/**
 *
 * @author ShookTea
 */
public class FinanceSum extends javax.swing.JInternalFrame implements UpdateI {

    /** Creates new form FinanceSum */
    public FinanceSum() {
        initComponents();
        updateData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Podsumowanie finansowe");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables

    @Override
    public void updateData() {
        tabs.removeAll();
        Finance[] finances = Project.project.finances.toArray(new Finance[Project.project.finances.size()]);
        ArrayList<Integer> years = new ArrayList();
        for (Finance f : finances) {
            if (!years.contains(f.getYear())) {
                years.add(f.getYear());
            }
        }
        for (int year : years) {
            ArrayList<Finance> months = new ArrayList();
            for (Finance f : finances) {
                if (f.getYear() == year) {
                    months.add(f);
                }
            }
            Finance[] monthsT = months.toArray(new Finance[months.size()]);
            FinanceSumPanel fsp = new FinanceSumPanel(monthsT);
            tabs.add(year + "", fsp);
            fsp.updateData();
        }
        
        //Podsumowanie całości
        FinanceSumPanel fsp = new FinanceSumPanel(finances, true);
        tabs.add("Wszystkie lata", fsp);
        fsp.updateData();
    }

}
